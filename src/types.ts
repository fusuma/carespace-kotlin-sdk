/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/login": {
    get: operations["AuthController_login"];
  };
  "/auth/logout": {
    get: operations["AuthController_logout"];
  };
  "/auth/token": {
    post: operations["AuthController_token"];
  };
  "/auth/sign-in": {
    /** @description Allows users to sign in by providing their credentials. Upon successful authentication, the server returns an access token and a refresh token, which can be used for subsequent authenticated requests and token renewal, respectively. */
    post: operations["AuthController_signIn"];
  };
  "/auth/refresh-token": {
    /** @description Allows users to refresh their access token using a valid refresh token. It helps maintain an active session without requiring the user to re-authenticate with their credentials. */
    post: operations["AuthController_refreshToken"];
  };
  "/auth/register": {
    /** @description Allows new users to register by providing the necessary information. Upon successful registration, the server may return an access token and a refresh token, allowing immediate authentication. */
    post: operations["AuthController_register"];
  };
  "/auth/sign-out": {
    /** @description Allows users to sign out by invalidating the current access and refresh tokens. It effectively ends the user session, requiring them to sign in again to obtain new tokens. */
    post: operations["AuthController_signOut"];
  };
  "/auth/password-recovery": {
    post: operations["AuthController_passwordRecovery"];
  };
  "/clients": {
    /** @description This endpoint retrieves a list of all client instances. It provides an overview of all registered clients in the system. */
    get: operations["ClientController_getAll"];
    /** @description This endpoint creates a new client instance. It registers a new customer in the multi-tenant application. */
    post: operations["ClientController_create"];
  };
  "/clients/{id}": {
    /** @description This endpoint retrieves details of a specific client instance by their unique identifier. */
    get: operations["ClientController_get"];
    /** @description This endpoint deletes a specific client instance by their unique identifier. It removes the client from the system. */
    delete: operations["ClientController_delete"];
    /** @description This endpoint updates details of a specific client instance. Only the fields that need to be updated should be provided. */
    patch: operations["ClientController_update"];
  };
  "/clients/invite-code/{inviteCode}": {
    /** @description This endpoint verifies and handles actions related to an invite code. It ensures that the provided invite code is valid and performs any necessary actions associated with it. */
    get: operations["ClientController_getClientByInviteCode"];
  };
  "/users/summary": {
    /** @description Retrieves a summary of all users (patients). It provides an overview of user statistics and other relevant summary information. */
    get: operations["UserController_getUsersSummary"];
  };
  "/users/new": {
    /** @description Creates a new user (patient) in the system. It registers a new patient with the necessary information. */
    get: operations["UserController_getAllNew"];
  };
  "/users/physiotherapists": {
    /** @description Retrieves a list of all physiotherapists (admin). It provides detailed information about all physiotherapists. */
    get: operations["UserController_getAllPhysiotherapists"];
  };
  "/users/unassigned": {
    /** @description Retrieves a list of all unassigned users. It provides detailed information about all unassigned users in the system. */
    get: operations["UserController_getAllUnassigned"];
  };
  "/users/pending-invites": {
    /** @description Retrieves a list of all unassigned users. It provides detailed information about all unassigned users in the system. */
    get: operations["UserController_getAllPendingInvites"];
  };
  "/users/assigned/{physiotherapistId}": {
    /** @description Retrieves a list of all assigned users. It provides detailed information about all assigned users in the system. */
    get: operations["UserController_getAllAssignedByPhysiotherapist"];
  };
  "/users/{id}": {
    /** @description Retrieves details of a specific user (patient) by their unique identifier. */
    get: operations["UserController_get"];
    delete: operations["UserController_delete"];
    /** @description Updates details of a specific user (patient). Only the fields that need to be updated should be provided. */
    patch: operations["UserController_update"];
  };
  "/users": {
    /** @description Retrieves a list of all users (patients). It provides detailed information about all registered users in the system. */
    get: operations["UserController_getAll"];
  };
  "/users/{id}/profile": {
    /** @description Retrieves the profile information of a specific user (patient). It provides detailed profile information based on the user's unique identifier. */
    get: operations["UserController_profile"];
  };
  "/users/activate": {
    /** @description Activates a user (patient) account. It ensures that the user's account is activated and ready for use. */
    post: operations["UserController_activateUser"];
  };
  "/users/{userId}/update-password": {
    patch: operations["UserController_updatePassword"];
  };
  "/users/associate-patient-physiotherapist": {
    /** @description Associates a physiotherapist (admin) with a patient (user). It ensures that the physiotherapist is associated with the patient. */
    post: operations["UserController_associatePatientToPhysiotherapist"];
  };
  "/users/patients/{patientId}/physiotherapists": {
    /** @description Retrieves a list of all physiotherapists (admin) associated with a specific patient (user). It provides detailed information about all physiotherapists associated with the patient. */
    get: operations["UserController_getPhysiotherapistsForPatient"];
  };
  "/users/physiotherapists/{physiotherapistId}/patients": {
    /** @description Retrieves a list of all patients (users) associated with a specific physiotherapist (admin). It provides detailed information about all patients associated with the physiotherapist. */
    get: operations["UserController_getPatientsForPhysiotherapist"];
  };
  "/users/assigned/{associationId}": {
    /** @description Dissociates a physiotherapist (admin) from a patient (user). It ensures that the physiotherapist is dissociated from the patient. */
    delete: operations["UserController_dissociatePhysiotherapistPatient"];
  };
  "/users/invite": {
    /** @description Generates an invite code for invite a new user. It ensures that the invite code is generated and ready for use. */
    post: operations["UserController_generateInvite"];
  };
  "/users/invite/bulk": {
    post: operations["UserController_createUsersBulk"];
  };
  "/users/invite/{inviteId}/resend": {
    post: operations["UserController_resendInvite"];
  };
  "/users/invite/{id}": {
    /** @description Generates an invite code for invite a new user. It ensures that the invite code is generated and ready for use. */
    delete: operations["UserController_deleteInvite"];
    /** @description Generates an invite code for invite a new user. It ensures that the invite code is generated and ready for use. */
    patch: operations["UserController_updateInvite"];
  };
  "/users/associate-patient-physiotherapist/{id}/show-popup": {
    /** @description Updates details of a specific user (patient). Only the fields that need to be updated should be provided. */
    patch: operations["UserController_updateShowPopup"];
  };
  "/users/daily-activity-distribution/{userId}": {
    get: operations["UserController_getDailyActivityDistribution"];
    post: operations["UserController_createDailyActivityDistribution"];
    patch: operations["UserController_updateDailyActivityDistribution"];
  };
  "/users/{userId}/weight": {
    post: operations["UserController_createOrUpdateWeight"];
  };
  "/users/functional-goals/{userId}": {
    post: operations["UserController_createFunctionalGoals"];
    patch: operations["UserController_updateFunctionalGoals"];
  };
  "/users/{userId}/wellness-check": {
    patch: operations["UserController_updateWellnessCheck"];
  };
  "/users/{userId}/pre-existing-conditions/agree": {
    patch: operations["UserController_agreeToPreExistingConditions"];
  };
  "/rom/patients/{patientId}/results": {
    /** @description Retrieves all range of motion evaluation results for a specific patient. */
    get: operations["RomController_getAllPatientResults"];
  };
  "/rom/sessions/{userId}/all": {
    /** @description Retrieves all range of motion evaluation sessions for a specific user. */
    get: operations["RomController_getAllSessionsByUser"];
  };
  "/rom/sessions/{userId}": {
    /** @description Retrieves the most recent range of motion evaluation session for a specific user. */
    get: operations["RomController_getLastUserSession"];
  };
  "/rom/patients/{patientId}/results/sessions": {
    /** @description Retrieves the range of motion evaluation results for all sessions of a specific patient. */
    get: operations["RomController_getAllPatientResultsBySession"];
  };
  "/rom/sessions/status/{status}/users": {
    /** @description Retrieves all users with range of motion evaluation sessions of a specific status. */
    get: operations["RomController_getAllSessionsByStatus"];
  };
  "/rom/sessions/{sessionId}/status": {
    /** @description Updates the status of a specific range of motion evaluation session. */
    patch: operations["RomController_updateSessionStatus"];
  };
  "/rom/session/{sessionId}": {
    /** @description Retrieves the current status of a specific range of motion evaluation session. */
    get: operations["RomController_getSessionById"];
  };
  "/rom/sessions": {
    /** @description Creates a new session and closes previously opened session. */
    post: operations["RomController_createSession"];
  };
  "/rom/sessions/programs/{programId}": {
    /** @description Retrieves all sessions for a specific program. */
    get: operations["RomController_getAllSessionByProgram"];
  };
  "/rom/sessions/{sessionId}": {
    /** @description Closes previously opened session. */
    patch: operations["RomController_updateSession"];
  };
  "/rom/sessions/{sessionId}/complete": {
    /** @description Closes previously opened session. */
    patch: operations["RomController_completeSession"];
  };
  "/rom/sessions/patient-results": {
    /** @description Creates and saves patient results performed by user (patient). */
    post: operations["RomController_savePatientResults"];
  };
  "/rom/sessions/patient-results/{resultId}": {
    /** @description Closes previously opened session. */
    patch: operations["RomController_updatePatientResults"];
  };
  "/rom/library": {
    /** @description Retrieves all exercise from exercise library. */
    get: operations["RomController_getRomLibrary"];
    /** @description Adds a new exercise to the exercise library. */
    post: operations["RomController_createRomLibrary"];
  };
  "/rom/library/{libraryId}": {
    /** @description Retrieves a rom library by id. */
    get: operations["RomController_getRomLibraryById"];
    /** @description Delete library. */
    delete: operations["RomController_deleteRomLibrary"];
    /** @description Adds a new exercise to the exercise library. */
    patch: operations["RomController_updateRomLibrary"];
  };
  "/rom/programs": {
    /** @description Retrieves all exercise programs for a specific user. */
    get: operations["RomController_getAllRomProgramsByUserId"];
    /** @description Creates a program with custom exercises. */
    post: operations["RomController_createRomProgram"];
  };
  "/rom/programs/patients/{patientId}": {
    /** @description Retrieves all exercise programs for a specific user. */
    get: operations["RomController_getAllRomProgramsByPatientId"];
  };
  "/rom/programs/{programId}": {
    /** @description Retrieves all exercise programs for a specific user. */
    get: operations["RomController_getRomProgramById"];
    /** @description Delete a Rom Program. */
    delete: operations["RomController_deleteRomProgram"];
    /** @description Creates a program with custom exercises. */
    patch: operations["RomController_updateRomProgram"];
  };
  "/rom/sessions/{sessionId}/pdf": {
    post: operations["RomController_generatePdfUrlAndSaveOnAzure"];
  };
  "/activity-stream/history/unread": {
    /** @description Fetches all unread entries from the activity stream. This endpoint highlights the events and communications that have not yet been viewed by the user or the physiotherapist. */
    get: operations["ActivityStreamHistoryController_getHistoryUnread"];
  };
  "/activity-stream/history/{userId}": {
    /** @description Retrieves the entire activity stream history for a specific user. This provides a comprehensive view of all events and interactions related to the patient. */
    get: operations["ActivityStreamHistoryController_getAllHistories"];
  };
  "/activity-stream/history/read/{userId}": {
    /** @description Marks all entries in the activity stream history as read for a specific user. This updates the status of the entries to indicate they have been reviewed. */
    patch: operations["ActivityStreamHistoryController_markHistoryAsRead"];
  };
  "/activity-stream/{id}": {
    /** @description Retrieves the details of a specific activity stream entry based on its unique identifier. This provides a detailed view of the event, message, or evaluation. */
    get: operations["ActivityStreamController_getActivityStreamById"];
  };
  "/activity-stream/evaluation": {
    /** @description Creates a new evaluation entry in the activity stream, linking various session and result IDs, notes, and feedback to a specific user and physiotherapist. This helps in documenting and assessing the patient's progress and activities comprehensively. */
    post: operations["ActivityStreamEvaluationController_createEvaluation"];
  };
  "/activity-stream/evaluation/{id}": {
    /** @description Retrieves a specific evaluation entry from the activity stream by its unique ID, providing detailed information about the patient's activities, progress, and feedback for that particular evaluation. */
    get: operations["ActivityStreamEvaluationController_getEvaluationById"];
  };
  "/activity-stream/feedback": {
    /** @description Creates a new feedback entry in the activity stream, linking it to a specific user and physiotherapist. The feedback can include notes, video content, and processing status, providing comprehensive documentation of patient feedback related to ROM sessions, programs, surveys, and evaluations. */
    post: operations["ActivityStreamFeedbackController_createFeedback"];
  };
  "/activity-stream/feedback/{id}": {
    /** @description Retrieves a specific feedback entry from the activity stream by its unique ID. This provides detailed information about the patient's feedback, including associated notes, video content, and the status of processing for that particular feedback entry. */
    get: operations["ActivityStreamFeedbackController_getFeedbackById"];
  };
  "/activity-stream/post": {
    /** @description Creates a new post in the activity stream. The post includes details such as the user ID, physiotherapist ID, images, videos, a message, and the activity stream ID. This allows for multimedia communication and updates between the patient and the physiotherapist. */
    post: operations["ActivityStreamPostController_createPost"];
  };
  "/activity-stream/post/{id}": {
    /** @description Retrieves a specific post from the activity stream by its ID. This endpoint provides access to the content of the post, including any attached images, videos, and the message, facilitating review and communication between the patient and the physiotherapist. */
    get: operations["ActivityStreamPostController_getPostById"];
  };
  "/rom/mobility-score/{userId}": {
    get: operations["MobilityScoreController_getAll"];
  };
  "/rom/program-templates": {
    /** @description Retrieves a list of all available custom rom templates, providing an overview of predefined exercise custom rom that can be assigned to patients. */
    get: operations["RomTemplateController_getRomAllTemplatesByClient"];
    /** @description Creates a custom rom template. This template can be reused for multiple patients, simplifying the creation of custom rom. */
    post: operations["RomTemplateController_createRomTemplate"];
  };
  "/rom/program-templates/{programTemplateId}": {
    /** @description Retrieves a list of all available custom rom templates, providing an overview of predefined exercise custom rom that can be assigned to patients. */
    get: operations["RomTemplateController_getRomTemplateById"];
    /** @description Retrieves a list of all available custom rom templates, providing an overview of predefined exercise custom rom that can be assigned to patients. */
    delete: operations["RomTemplateController_deleteRomTemplate"];
    /** @description Retrieves a list of all available custom rom templates, providing an overview of predefined exercise custom rom that can be assigned to patients. */
    patch: operations["RomTemplateController_updateRomTemplate"];
  };
  "/program/generate": {
    /** @description Generates a new exercise program for a patient based on AI recommendations. It considers the patient's evaluation results and OmniROM evaluation results. */
    post: operations["ProgramController_generateProgram"];
  };
  "/program": {
    /** @description Creates a new exercise program. */
    post: operations["ProgramController_create"];
  };
  "/program/{userId}": {
    /** @description Retrieves all exercise programs for a specific user (patient). */
    get: operations["ProgramController_getAllByUser"];
  };
  "/program/exercises/{exerciseId}": {
    /** @description Updates details of a specific exercise within a program. */
    patch: operations["ProgramController_updateProgramExercise"];
  };
  "/program/{programId}": {
    patch: operations["ProgramController_updateProgram"];
  };
  "/program/{programId}/exercises": {
    /** @description Adds a new exercise to an existing program. */
    post: operations["ProgramController_addExerciseToProgram"];
  };
  "/program/{programId}/exercises/order": {
    /** @description Updates the order of exercises within a specific program. */
    patch: operations["ProgramController_updateProgramExercisesOrder"];
  };
  "/program/templates/{templateId}/users/{userId}": {
    /** @description Creates a new exercise program for a specific user based on a template. */
    post: operations["ProgramController_createFromTemplate"];
  };
  "/program/sessions": {
    /** @description Creates a new session for a program, tracking the patient's exercise session. */
    post: operations["ProgramController_createSession"];
  };
  "/program/sessions/results": {
    /** @description Submits the results of a program session, including details of exercises performed and patient feedback. */
    post: operations["ProgramController_createSessionResult"];
  };
  "/program/{programId}/sessions": {
    /** @description Retrieves all sessions for a specific program. */
    get: operations["ProgramController_getAllSessionsByProgram"];
  };
  "/program/{programId}/exercises/{exerciseId}/sessions": {
    /** @description Retrieves all sessions for a specific exercise within a program. */
    get: operations["ProgramController_getAllExercisesResultsByProgram"];
  };
  "/program/exercises/library": {
    /** @description Adds a new exercise to the exercise library. */
    post: operations["ProgramController_createExerciseLibrary"];
  };
  "/program/exercises/library/physioterapists/{physioterapistId}": {
    /** @description Retrieves all exercises in the library added by a specific Physical Therapist. */
    get: operations["ProgramController_getExercisesLibrary"];
  };
  "/program/library/exercises": {
    /** @description Updates the details of a specific exercise in the exercise library. */
    patch: operations["ProgramController_updateExerciseLibrary"];
  };
  "/program/exercises/library/{exerciseId}": {
    /** @description Deletes a specific exercise from the exercise library. The exercise is identified by its unique identifier. */
    delete: operations["ProgramController_deleteVideoFromLibrary"];
  };
  "/program/sessions/status/{status}/users": {
    /** @description Retrieves a list of users based on the status of their program sessions. This helps in tracking user progress and session completions. */
    get: operations["ProgramController_getSessionsByStatus"];
  };
  "/program/sessions/{sessionId}/status": {
    /** @description Updates the status of a specific program session. This is used to mark sessions as completed, pending, or in-progress based on the session identifier. */
    patch: operations["ProgramController_updateSessionStatus"];
  };
  "/program/enrollments/{userId}": {
    /** @description Enrolls a user in a specific program. This associates a user with a program, allowing them to start following the prescribed exercise regimen. */
    post: operations["ProgramController_requestEnrollment"];
  };
  "/program/enrollments": {
    /** @description Retrieves a list of all program enrollments. This includes information on which users are enrolled in which programs, useful for tracking participation and engagement. */
    get: operations["ProgramController_getRequestedEnrollment"];
  };
  "/program/sessions/{sessionId}/complete": {
    /** @description Marks a specific program session as complete. This is used to indicate that a user has finished the session as prescribed. */
    patch: operations["ProgramController_completeSession"];
  };
  "/program/sessions/{sessionId}": {
    get: operations["ProgramController_getSessionsById"];
  };
  "/program/get/{programId}": {
    get: operations["ProgramController_getProgramById"];
  };
  "/program/{programId}/users/{userId}": {
    delete: operations["ProgramController_deleteProgramFromUser"];
  };
  "/program/sessions/{sessionId}/results/{resultId}": {
    patch: operations["ProgramController_updateSessionResult"];
  };
  "/program/open-ai/users/{userId}": {
    /** @description Retrieves data specific to a user, including their AI-generated programs, exercises, and other related information. This endpoint provides a detailed view of the user's interactions and usage of AI-assisted features. */
    get: operations["OpenAiController_getProgramAi"];
  };
  "/program/open-ai": {
    /** @description Creates a new AI-assisted entry or program based on the provided data. This endpoint leverages AI capabilities to generate personalized content, programs, or analyses for the user. */
    post: operations["OpenAiController_generateProgram"];
  };
  "/program/program-template": {
    /** @description Creates a new program template with a specified duration and a list of exercises. This template can be reused for multiple patients, simplifying the creation of exercise programs. */
    post: operations["ProgramTemplateController_create"];
  };
  "/program/program-template/list": {
    /** @description Retrieves a list of all available program templates, providing an overview of predefined exercise programs that can be assigned to patients. */
    get: operations["ProgramTemplateController_getAllByClient"];
  };
  "/program/program-template/{programId}": {
    /** @description Updates an existing program template identified by its unique ID, allowing modifications to the template's duration, exercises, and other details. */
    patch: operations["ProgramTemplateController_updateProgram"];
  };
  "/program/program-template/{programId}/exercises": {
    /** @description Adds new exercises to an existing program template, enabling further customization and expansion of the exercise program. */
    post: operations["ProgramTemplateController_addExerciseToProgram"];
  };
  "/program/program-template/exercises/{exerciseId}": {
    /** @description Updates specific exercises within a program template, allowing adjustments to the number of reps, sets, order, and other exercise parameters. */
    patch: operations["ProgramTemplateController_updateProgramExercise"];
  };
  "/settings": {
    /** @description Retrieves the current settings for all clients, providing an overview of configuration details such as API keys and their statuses. */
    get: operations["SettingsController_getSettings"];
    /** @description Creates new settings for a client, including OpenAI API key information and activation status. This endpoint allows for the initial configuration and integration setup. */
    post: operations["SettingsController_create"];
  };
  "/settings/{settingsId}": {
    /** @description Updates existing settings identified by their unique identifier. This endpoint enables modifications to API key information, activation status, and other configuration details. */
    patch: operations["SettingsController_updateSettings"];
  };
  "/settings/templates/email": {
    get: operations["SettingsController_getEmailTemplate"];
    post: operations["SettingsController_createOrUpdateEmailTemplate"];
  };
  "/settings/templates/invite": {
    get: operations["SettingsController_getInviteTemplate"];
    post: operations["SettingsController_createOrUpdateInviteTemplate"];
  };
  "/settings/templates/email/rom": {
    get: operations["SettingsController_getRomEmailTemplate"];
    post: operations["SettingsController_createOrUpdateRomEmailTemplate"];
  };
  "/settings/themes": {
    get: operations["SettingsController_getTheme"];
    post: operations["SettingsController_createOrUpdateTheme"];
  };
  "/settings/network": {
    get: operations["SettingsController_getNetworkSettings"];
    post: operations["SettingsController_createOrUpdateNetworkSettings"];
  };
  "/settings/premium-plans/status": {
    get: operations["SettingsController_getPremiumPlansStatusSettings"];
    post: operations["SettingsController_createOrUpdatePremiumPlansStatusSettings"];
  };
  "/settings/plans": {
    get: operations["PlansSettingsController_getPlanSettings"];
    post: operations["PlansSettingsController_createOrUpdatePlanSettings"];
  };
  "/settings/functional-goals": {
    get: operations["FunctionalGoalsSettingsController_getPlanSettings"];
    post: operations["FunctionalGoalsSettingsController_createOrUpdatePlanSettings"];
  };
  "/settings/pre-existing-conditions": {
    get: operations["PreExistingConditionsSettingsController_getPlanSettings"];
    post: operations["PreExistingConditionsSettingsController_createOrUpdatePlanSettings"];
  };
  "/evaluation": {
    /** @description Initiates a new evaluation for a patient, collecting comprehensive data on their pain points, health signs, and medical history. */
    post: operations["EvaluationController_createEvaluation"];
  };
  "/evaluation/{sessionId}": {
    /** @description Updates an existing evaluation session with new or revised information. */
    patch: operations["EvaluationController_updateSession"];
  };
  "/evaluation/{userId}": {
    /** @description Retrieves the evaluation data for a specific user, including their pain assessments, health signs, and medical history. */
    get: operations["EvaluationController_getEvaluationSessionsByUserId"];
  };
  "/evaluation/sessions/{evaluationId}": {
    get: operations["EvaluationController_getEvaluationSessionsById"];
  };
  "/evaluation/sessions/status/{status}/users": {
    /** @description Retrieves users based on the status of their evaluation sessions, aiding in tracking and managing patient evaluations. */
    get: operations["EvaluationController_getAllResultsByStatus"];
  };
  "/evaluation/sessions/{sessionId}/status": {
    /** @description Updates the status of a specific evaluation session, such as marking it as completed or in-progress. */
    patch: operations["EvaluationController_updateSessionStatus"];
  };
  "/reports": {
    /** @description Generates a new report based on specified parameters, such as user activities and tool usage within a defined date range. */
    post: operations["ReportsController_createReport"];
  };
  "/reports/create": {
    /** @description Creates a detailed report, allowing customization of included data such as ROM sessions, program sessions, evaluation sessions, and survey results. */
    post: operations["ReportsController_createReportByFeatureAndDate"];
  };
  "/reports/users/{userId}": {
    /** @description Retrieves reports specific to a particular user, detailing their interactions and usage of system tools. */
    get: operations["ReportsController_getAll"];
  };
  "/reports/{reportId}": {
    /** @description Fetches a specific report by its unique identifier, providing detailed information about the user's system usage and activities. */
    get: operations["ReportsController_getOne"];
    /** @description Deletes a specific report identified by its unique identifier, removing it from the system. */
    delete: operations["ReportsController_deleteReport"];
    /** @description Updates an existing report with new data or changes to previously included information. */
    patch: operations["ReportsController_updateReport"];
  };
  "/reports/notes/{reportId}": {
    /** @description Updates notes for existing report and appends new notes to previously included notes. */
    patch: operations["ReportsController_updateReportNotes"];
  };
  "/reports/omnirom/csv": {
    get: operations["ReportsController_omniRomeCSV"];
  };
  "/reports/letsmove/csv": {
    get: operations["ReportsController_letsMoveCSV"];
  };
  "/reports/aggregate/excel": {
    get: operations["ReportsController_aggregateCSV"];
  };
  "/survey": {
    /** @description Creates a new survey with customizable questions and options, which can be manually tailored by the PT. The survey can also include images and instructions, and be saved as a template for future use. */
    post: operations["SurveyController_createSurvey"];
  };
  "/survey/{userId}": {
    /** @description Retrieves all surveys associated with a specific user, providing an overview of their survey history and data collected. */
    get: operations["SurveyController_getAllByUser"];
  };
  "/survey/{surveyId}": {
    delete: operations["SurveyController_deleteSurveyById"];
    /** @description Updates an existing survey identified by its unique ID, allowing modifications to the survey's questions, options, and other details. */
    patch: operations["SurveyController_updateSurvey"];
  };
  "/survey/session/{surveyId}": {
    /** @description Creates a new survey session for a specific survey ID, initiating the survey for a patient to complete. */
    post: operations["SurveyController_saveSurveyResult"];
  };
  "/survey/session/{userId}": {
    /** @description Fetches all survey sessions associated with a specific user, detailing their participation and responses in various surveys. */
    get: operations["SurveyController_getSurveyResultsByUser"];
  };
  "/survey/get/{surveyId}": {
    /** @description Retrieves the details of a specific survey by its unique identifier, including its questions, options, and other configuration details. */
    get: operations["SurveyController_getSurveyById"];
  };
  "/survey/result/{surveyResultId}": {
    /** @description Obtains the results of a specific survey session, providing insights into the patient's responses and feedback. */
    get: operations["SurveyController_getSurveyResultById"];
  };
  "/survey/sessions/{surveyId}": {
    /** @description Lists all sessions for a specific survey, allowing the PT to track patient participation and survey completion. */
    get: operations["SurveyController_getSurveyResultBySurveyId"];
  };
  "/survey/sessions/status/{status}/users": {
    /** @description Retrieves users based on the status of their survey sessions, helping PTs monitor survey progress and follow-up as needed. */
    get: operations["SurveyController_getSessionsByStatus"];
  };
  "/survey/sessions/{sessionId}/status": {
    /** @description Updates the status of a specific survey session, such as marking it as completed or in-progress, ensuring accurate tracking and management of survey activities. */
    patch: operations["SurveyController_updateSessionStatus"];
  };
  "/survey/template": {
    /** @description Creates a new survey template, including a title, description, instructions, result feedback, and a set of predefined questions with options. This template can be used to quickly generate surveys for patients. */
    post: operations["SurveyTemplateController_createSurveyTemplate"];
  };
  "/survey/template/list": {
    /** @description Retrieves a list of all available survey templates, providing an overview of predefined surveys that can be assigned to patients. */
    get: operations["SurveyTemplateController_getAllByClient"];
  };
  "/survey/template/{surveyTemplateId}": {
    /** @description Updates an existing survey template identified by its unique ID, allowing modifications to the template's title, description, questions, and other details. */
    patch: operations["SurveyTemplateController_updateSurvey"];
  };
  "/posture-analytics/sessions": {
    /** @description Creates a new posture analytics session entry. */
    post: operations["PostureAnalyticsController_createPostureAnalyticsSession"];
  };
  "/posture-analytics": {
    /** @description Creates a new posture analytics entry. */
    post: operations["PostureAnalyticsController_createPostureAnalytics"];
  };
  "/posture-analytics/sessions/users/{userId}": {
    /** @description Retrieves posture analytics sessions by user ID. */
    get: operations["PostureAnalyticsController_getPostureAnalyticsSessionByUserId"];
  };
  "/posture-analytics/{id}": {
    /** @description Retrieves a specific posture analytics entry by ID. */
    get: operations["PostureAnalyticsController_getPostureAnalyticsById"];
  };
  "/posture-analytics/sessions/{id}": {
    /** @description Deletes a specific posture analytics entry by ID. */
    delete: operations["PostureAnalyticsController_deletePostureAnalyticsSessionById"];
  };
  "/posture-analytics/sessions/{sessionId}/status": {
    /** @description Updates the status of a specific posture session, such as marking it as completed or in-progress. */
    patch: operations["PostureAnalyticsController_updatePostureSessionStatus"];
  };
  "/posture-analytics/report": {
    /** @description Creates a new posture analytics report, which includes detailed assessments of the user’s posture based on the session data. */
    post: operations["PostureAnalyticsController_createPostureAnalyticsReport"];
  };
  "/posture-analytics/users/{userId}/report": {
    /** @description Retrieves a list of all posture analytics reports, providing an overview of posture assessments for users. */
    get: operations["PostureAnalyticsController_getPostureAnalyticsReport"];
  };
  "/posture-analytics/sessions/{sessionId}/report": {
    /** @description Retrieves a list of all posture analytics reports, providing an overview of posture assessments for users. */
    get: operations["PostureAnalyticsController_getPostureAnalyticsReportBySessionId"];
  };
  "/stats": {
    /** @description Retrieves all stats */
    get: operations["StatsController_getStatsFromClient"];
  };
  "/plans/users": {
    /** @description Retrieves all plans */
    get: operations["PlansController_getUsersPlans"];
  };
  "/plans/users/{userId}": {
    /** @description Retrieves all plans */
    get: operations["PlansController_getUserPlan"];
    /** @description Retrieves all plans */
    post: operations["PlansController_createUserPlan"];
    /** @description Retrieves all plans */
    patch: operations["PlansController_updateUserPlan"];
  };
  "/vr/generate-code/{userId}": {
    post: operations["VrAuthController_generateCode"];
  };
  "/vr/validate-code": {
    post: operations["VrAuthController_validateCode"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    SignInDto: {
      /** Format: email */
      email: string;
      password: string;
      inviteCode: string;
    };
    AuthSignInResponseDto: {
      accessToken?: string;
      refreshToken?: string;
      user?: components["schemas"]["UserResponseDto"];
    };
    RefreshTokenDto: {
      refreshToken: string;
    };
    RegisterDto: {
      /** Format: email */
      email: string;
      password: string;
      firstName: string;
      lastName: string;
      inviteCode: string;
    };
    AuthRegisterResponseDto: {
      user?: components["schemas"]["UserResponseDto"];
    };
    PasswordRecoveryDto: {
      /** Format: email */
      email: string;
    };
    UserResponseDto: {
      id?: string;
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
      active?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    UserResponsePaginatedDto: {
      data?: components["schemas"]["UserResponseDto"][];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    PluginPaginationDtoResponse: {
      page?: number;
      size?: number;
      total?: number;
      totalPages?: number;
    };
    ClientDto: {
      id?: string;
      name?: string;
      description?: string;
      active?: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    UpdateClientDto: {
      name?: string;
      description?: string;
      active?: boolean;
    };
    UserSummaryResponseDto: {
      id?: string;
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
    };
    Object: {
      [key: string]: unknown;
    };
    UserInviteResponsePaginatedDto: {
      data?: components["schemas"]["UserInvite"][];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    UserInvite: {
      id?: string;
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
      status?: string;
      inviteCode?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    UserUpdateDto: {
      firstName?: string;
      lastName?: string;
      active?: boolean;
    };
    UserActivateDto: {
      active?: boolean;
    };
    UserUpdatePasswordDto: {
      currentPassword: string;
      newPassword: string;
    };
    ActivityStreamDto: {
      id?: string;
      message?: string;
      type?: string;
      userId?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    ActivityStreamCreateEvaluationDto: {
      message?: string;
      evaluationId?: string;
    };
    ActivityStreamEvaluationDto: {
      id?: string;
      message?: string;
      evaluationId?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    ActivityStreamCreateFeedbackDto: {
      message?: string;
      feedback?: string;
    };
    ActivityStreamFeedbackDto: {
      id?: string;
      message?: string;
      feedback?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    ActivityStreamCreatePostDto: {
      message?: string;
      content?: string;
    };
    ActivityStreamPostDto: {
      id?: string;
      message?: string;
      content?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    ActivityStreamHistoryPaginatedResponseDto: {
      data?: components["schemas"]["ActivityStreamHistory"][];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ActivityStreamHistory: {
      id?: string;
      message?: string;
      type?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    ActivityStreamUnreadMessagesResponseDto: {
      count?: number;
    };
    ActivityStream: {
      id?: string;
    };
    ActivityStreamEvaluation: {
      id?: string;
    };
    ActivityStreamFeedback: {
      id?: string;
    };
    ActivityStreamPost: {
      id?: string;
    };
    Client: {
      id?: string;
    };
    ClientSettings: {
      id?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    ClientSettingsDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    ConnectPostureAnalyticsSessionDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    CreateBulkInvitesExtendedDto: {
      name?: string;
    };
    CreateClientSettingsDto: {
      name?: string;
      value?: string;
      active?: boolean;
    };
    CreateDailyActivityDistributionDto: {
      name?: string;
    };
    CreateEmailTemplateDto: {
      name?: string;
    };
    CreateFunctionalGoalsDto: {
      name?: string;
    };
    CreateInviteTemplateDto: {
      name?: string;
    };
    CreateOrUpdateNetworkSettingsDto: {
      name?: string;
      value?: string;
      active?: boolean;
    };
    CreateOrUpdatePremiumPlanStatusSettingsDto: {
      name?: string;
      value?: string;
      active?: boolean;
    };
    CreateOrUpdateThemeDto: {
      name?: string;
    };
    CreatePhysiotherapistPatientAssociationDto: {
      name?: string;
    };
    CreatePlansDto: {
      name?: string;
    };
    CreatePostureAnalyticsDto: {
      name?: string;
    };
    CreatePostureAnalyticsReportExtendedDto: {
      name?: string;
    };
    CreatePostureAnalyticsSessionDto: {
      name?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    CreateProgramAiDto: {
      name?: string;
    };
    CreateProgramExerciseDto: {
      name?: string;
    };
    CreateProgramExerciseTemplateDto: {
      name?: string;
    };
    CreateProgramExtendedDto: {
      name?: string;
    };
    CreateProgramSessionDto: {
      name?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    CreateProgramTemplateDto: {
      name?: string;
    };
    CreateReportsDto: {
      name?: string;
    };
    CreateReportsFeatureDateDto: {
      name?: string;
    };
    CreateRomEmailTemplateDto: {
      name?: string;
    };
    CreateRomPatientResultDto: {
      name?: string;
    };
    CreateRomProgramDto: {
      name?: string;
    };
    CreateRomProgramTemplateDto: {
      name?: string;
    };
    CreateRomSessionDto: {
      name?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    CreateSurveyCustomDto: {
      name?: string;
    };
    CreateSurveyResultDto: {
      name?: string;
    };
    CreateSurveyTemplateDto: {
      name?: string;
    };
    CreateSurveyTemplateQuestionDto: {
      name?: string;
    };
    CreateUserInviteDto: {
      name?: string;
      /** Format: email */
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
    };
    CreateUsersBulkInvitesDto: {
      name?: string;
      /** Format: email */
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
    };
    DailyActivityDistribution: {
      id?: string;
    };
    DeleteIdListDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    EmailTemplate: {
      id?: string;
    };
    EvaluationCreateDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    EvaluationResponseDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      status?: string;
      message?: string;
    };
    EvaluationResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    EvaluationSession: {
      id?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    EvaluationSessionDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    EvaluationUpdateSessionDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    EvaluationUserSessionResponsePaginatedByUserDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ExerciseLibrary: {
      id?: string;
    };
    ExtendedExerciseLibraryPaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ExtendedMedicalHistory: {
      id?: string;
    };
    ExtendedPainAssessmentDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ExtendedPostureAnalyticsSessionPaginated: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ExtendedProgramPaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ExtendedProgramSessionPaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ExtendedProgramSessionResultPaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ExtendedReportsDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ExtendedRomExerciseFromStrapi: {
      id?: string;
    };
    ExtendedRomLibrary: {
      id?: string;
    };
    ExtendedRomLibraryDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ExtendedRomLibraryPaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ExtendedRomPatientResultDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ExtendedRomProgramDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ExtendedRomProgramPaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ExtendedRomSessionDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    ExtendedRomTemplatePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ExtendedTemplateDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ExtendedUpdateRomPatientResultDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ExtendedUpdateRomProgramDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ExtendedUpdateTemplateDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ExtendedUserResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    FunctionalGoals: {
      id?: string;
    };
    FunctionalGoalsSettings: {
      id?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    FunctionalGoalsSettingsDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    GeneratePdfUrlAndSaveOnAzureDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    HealthSigns: {
      id?: string;
    };
    InviteTemplate: {
      id?: string;
    };
    MedicalHistory: {
      id?: string;
    };
    MobilityScore: {
      id?: string;
    };
    MobilityScorePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    NetworkSettings: {
      id?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    NetworkSettingsDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    PainAssessment: {
      id?: string;
    };
    Performance: {
      id?: string;
    };
    PhysiotherapistPatientAssociation: {
      id?: string;
    };
    Plans: {
      id?: string;
    };
    PlansDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    PlansResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    PlansSettings: {
      id?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    PlansSettingsDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    PostureAnalytics: {
      id?: string;
    };
    PostureAnalyticsReport: {
      id?: string;
    };
    PostureAnalyticsReportPaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    PostureAnalyticsSession: {
      id?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    PreExistingConditionsSettings: {
      id?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    PreExistingConditionsSettingsDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    PremiumPlanStatus: {
      id?: string;
    };
    PremiumPlanStatusDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    Profile: {
      id?: string;
    };
    Program: {
      id?: string;
    };
    ProgramExercise: {
      id?: string;
    };
    ProgramExerciseLibraryUpdateDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ProgramExerciseTemplate: {
      id?: string;
    };
    ProgramRequestEnrollmentResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ProgramSession: {
      id?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    ProgramSessionResult: {
      id?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    ProgramTemplate: {
      id?: string;
    };
    ProgramTemplateResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    ReportNotes: {
      id?: string;
    };
    Reports: {
      id?: string;
    };
    ReportsDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    ReportsResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    RomEmailTemplate: {
      id?: string;
    };
    RomLibrary: {
      id?: string;
    };
    RomPatientResult: {
      id?: string;
    };
    RomPatientResultDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    RomProgram: {
      id?: string;
    };
    RomProgramDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    RomProgramExerciseExtended: {
      id?: string;
    };
    RomProgramTemplate: {
      id?: string;
    };
    RomResultsExtended: {
      id?: string;
    };
    RomSession: {
      id?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    RomSessionDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    RomUpdateSessionStatusDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    RomUserSessionExtendedResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    RomUserSessionResponsePaginatedByUserDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    Sort: {
      id?: string;
    };
    Stats: {
      id?: string;
    };
    StatsResponseDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      status?: string;
      message?: string;
    };
    Survey: {
      id?: string;
    };
    SurveyQuestionOptions: {
      id?: string;
    };
    SurveyResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    SurveyResult: {
      id?: string;
    };
    SurveyResultQuestionList: {
      id?: string;
    };
    SurveyResultsResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    SurveySession: {
      id?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    SurveySessionsByStatusDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    SurveyTemplate: {
      id?: string;
    };
    SurveyTemplateQuestion: {
      id?: string;
    };
    SurveyTemplateQuestionOptions: {
      id?: string;
    };
    SurveyTemplateResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    Theme: {
      id?: string;
    };
    ThemeDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    UpdateClientSettingsDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    UpdateFunctionalGoalsSettingsExtendedDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    UpdatePlansDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdatePlansSettingsDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    UpdatePreExistingConditionsSettingsDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      value?: string;
      active?: boolean;
    };
    UpdateProgramCustomDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateProgramExerciseDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateProgramExerciseTemplateDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateProgramExercisesOrderDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateProgramSessionResultDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    UpdateProgramTemplateDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateReportNotesExtendedDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateReportsDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateReportsEvaluationSessionsIdsRelationInputDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    UpdateReportsPostureSessionsIdsRelationInputDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    UpdateReportsProgramSessionsIdsRelationInputDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    UpdateReportsProgramSessionsResultsIdsRelationInputDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    UpdateReportsRomResultsIdsRelationInputDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateReportsRomSessionsIdsRelationInputDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    UpdateReportsSurveyResultIdsRelationInputDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateRomLibraryDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateRomSessionDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    UpdateSurveyCustomDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateSurveyQuestionCustomDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateSurveyQuestionModifiedDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateSurveyTemplateCustomDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    UpdateUserInviteDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
      /** Format: email */
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
    };
    UpdateWeightExtendedDto: {
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      name?: string;
    };
    User: {
      id?: string;
      /** Format: email */
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
    };
    UserAssociationResponsePaginatedDto: {
      data?: Record<string, never>[];
      pagination?: components["schemas"]["PluginPaginationDtoResponse"];
    };
    UserRegistrationDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: email */
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
    };
    UserToolStatus: {
      id?: string;
      /** Format: email */
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
    };
    UserTwoFactorConfigurationDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: email */
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
    };
    UserUpdateShowPopupDto: {
      id?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
      /** Format: email */
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
    };
    UsersStats: {
      id?: string;
      /** Format: email */
      email?: string;
      firstName?: string;
      lastName?: string;
      role?: string;
    };
    VrSession: {
      id?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      status?: string;
    };
    Weight: {
      id?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AuthController_login: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  AuthController_logout: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  AuthController_token: {
    responses: {
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** @description Allows users to sign in by providing their credentials. Upon successful authentication, the server returns an access token and a refresh token, which can be used for subsequent authenticated requests and token renewal, respectively. */
  AuthController_signIn: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AuthSignInResponseDto"];
        };
      };
    };
  };
  /** @description Allows users to refresh their access token using a valid refresh token. It helps maintain an active session without requiring the user to re-authenticate with their credentials. */
  AuthController_refreshToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** @description Allows new users to register by providing the necessary information. Upon successful registration, the server may return an access token and a refresh token, allowing immediate authentication. */
  AuthController_register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AuthRegisterResponseDto"];
        };
      };
    };
  };
  /** @description Allows users to sign out by invalidating the current access and refresh tokens. It effectively ends the user session, requiring them to sign in again to obtain new tokens. */
  AuthController_signOut: {
    responses: {
      201: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  AuthController_passwordRecovery: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordRecoveryDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  /** @description This endpoint retrieves a list of all client instances. It provides an overview of all registered clients in the system. */
  ClientController_getAll: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientDto"][];
        };
      };
    };
  };
  /** @description This endpoint creates a new client instance. It registers a new customer in the multi-tenant application. */
  ClientController_create: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ClientDto"];
        };
      };
    };
  };
  /** @description This endpoint retrieves details of a specific client instance by their unique identifier. */
  ClientController_get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientDto"];
        };
      };
    };
  };
  /** @description This endpoint deletes a specific client instance by their unique identifier. It removes the client from the system. */
  ClientController_delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientDto"];
        };
      };
    };
  };
  /** @description This endpoint updates details of a specific client instance. Only the fields that need to be updated should be provided. */
  ClientController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateClientDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientDto"];
        };
      };
    };
  };
  /** @description This endpoint verifies and handles actions related to an invite code. It ensures that the provided invite code is valid and performs any necessary actions associated with it. */
  ClientController_getClientByInviteCode: {
    parameters: {
      path: {
        inviteCode: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientDto"];
        };
      };
    };
  };
  /** @description Retrieves a summary of all users (patients). It provides an overview of user statistics and other relevant summary information. */
  UserController_getUsersSummary: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserSummaryResponseDto"];
        };
      };
    };
  };
  /** @description Creates a new user (patient) in the system. It registers a new patient with the necessary information. */
  UserController_getAllNew: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves a list of all physiotherapists (admin). It provides detailed information about all physiotherapists. */
  UserController_getAllPhysiotherapists: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves a list of all unassigned users. It provides detailed information about all unassigned users in the system. */
  UserController_getAllUnassigned: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        /** @description Name */
        name?: string;
        /** @description Role */
        role?: components["schemas"]["Object"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves a list of all unassigned users. It provides detailed information about all unassigned users in the system. */
  UserController_getAllPendingInvites: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        /** @description Name */
        name?: string;
        /** @description Role */
        role?: components["schemas"]["Object"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserInviteResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves a list of all assigned users. It provides detailed information about all assigned users in the system. */
  UserController_getAllAssignedByPhysiotherapist: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        /** @description Name */
        name?: string;
        /** @description Role */
        role?: components["schemas"]["Object"];
      };
      path: {
        physiotherapistId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves details of a specific user (patient) by their unique identifier. */
  UserController_get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
    };
  };
  UserController_delete: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
    };
  };
  /** @description Updates details of a specific user (patient). Only the fields that need to be updated should be provided. */
  UserController_update: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
    };
  };
  /** @description Retrieves a list of all users (patients). It provides detailed information about all registered users in the system. */
  UserController_getAll: {
    parameters: {
      query: {
        name: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserResponseDto"][];
        };
      };
    };
  };
  /** @description Retrieves the profile information of a specific user (patient). It provides detailed profile information based on the user's unique identifier. */
  UserController_profile: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** @description Activates a user (patient) account. It ensures that the user's account is activated and ready for use. */
  UserController_activateUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserActivateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
    };
  };
  UserController_updatePassword: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdatePasswordDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** @description Associates a physiotherapist (admin) with a patient (user). It ensures that the physiotherapist is associated with the patient. */
  UserController_associatePatientToPhysiotherapist: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePhysiotherapistPatientAssociationDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PhysiotherapistPatientAssociation"];
        };
      };
    };
  };
  /** @description Retrieves a list of all physiotherapists (admin) associated with a specific patient (user). It provides detailed information about all physiotherapists associated with the patient. */
  UserController_getPhysiotherapistsForPatient: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
      path: {
        patientId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserAssociationResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves a list of all patients (users) associated with a specific physiotherapist (admin). It provides detailed information about all patients associated with the physiotherapist. */
  UserController_getPatientsForPhysiotherapist: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
      path: {
        physiotherapistId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserAssociationResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Dissociates a physiotherapist (admin) from a patient (user). It ensures that the physiotherapist is dissociated from the patient. */
  UserController_dissociatePhysiotherapistPatient: {
    parameters: {
      path: {
        associationId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /** @description Generates an invite code for invite a new user. It ensures that the invite code is generated and ready for use. */
  UserController_generateInvite: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserInviteDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserInvite"];
        };
      };
    };
  };
  UserController_createUsersBulk: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBulkInvitesExtendedDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  UserController_resendInvite: {
    parameters: {
      path: {
        inviteId: string;
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /** @description Generates an invite code for invite a new user. It ensures that the invite code is generated and ready for use. */
  UserController_deleteInvite: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserInvite"];
        };
      };
    };
  };
  /** @description Generates an invite code for invite a new user. It ensures that the invite code is generated and ready for use. */
  UserController_updateInvite: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserInviteDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserInvite"];
        };
      };
    };
  };
  /** @description Updates details of a specific user (patient). Only the fields that need to be updated should be provided. */
  UserController_updateShowPopup: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateShowPopupDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
    };
  };
  UserController_getDailyActivityDistribution: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DailyActivityDistribution"];
        };
      };
    };
  };
  UserController_createDailyActivityDistribution: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDailyActivityDistributionDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DailyActivityDistribution"];
        };
      };
    };
  };
  UserController_updateDailyActivityDistribution: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDailyActivityDistributionDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DailyActivityDistribution"];
        };
      };
    };
  };
  UserController_createOrUpdateWeight: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWeightExtendedDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Weight"];
        };
      };
    };
  };
  UserController_createFunctionalGoals: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFunctionalGoalsDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FunctionalGoals"];
        };
      };
    };
  };
  UserController_updateFunctionalGoals: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFunctionalGoalsDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FunctionalGoals"];
        };
      };
    };
  };
  UserController_updateWellnessCheck: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserResponseDto"];
        };
      };
    };
  };
  UserController_agreeToPreExistingConditions: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description Retrieves all range of motion evaluation results for a specific patient. */
  RomController_getAllPatientResults: {
    parameters: {
      query?: {
        /** @description strapiOmniRomExerciseId */
        strapiOmniRomExerciseId?: number;
        /** @description Initial date */
        initialDate?: string;
        /** @description Final date */
        finalDate?: string;
      };
      path: {
        patientId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomPatientResultDto"][];
        };
      };
    };
  };
  /** @description Retrieves all range of motion evaluation sessions for a specific user. */
  RomController_getAllSessionsByUser: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomUserSessionExtendedResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves the most recent range of motion evaluation session for a specific user. */
  RomController_getLastUserSession: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomSessionDto"];
        };
      };
    };
  };
  /** @description Retrieves the range of motion evaluation results for all sessions of a specific patient. */
  RomController_getAllPatientResultsBySession: {
    parameters: {
      query?: {
        /** @description strapiOmniRomExerciseId */
        strapiOmniRomExerciseId?: number;
        /** @description Initial date */
        initialDate?: string;
        /** @description Final date */
        finalDate?: string;
      };
      path: {
        patientId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomSessionDto"][];
        };
      };
    };
  };
  /** @description Retrieves all users with range of motion evaluation sessions of a specific status. */
  RomController_getAllSessionsByStatus: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
      path: {
        status: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomUserSessionResponsePaginatedByUserDto"];
        };
      };
    };
  };
  /** @description Updates the status of a specific range of motion evaluation session. */
  RomController_updateSessionStatus: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RomUpdateSessionStatusDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomSessionDto"];
        };
      };
    };
  };
  /** @description Retrieves the current status of a specific range of motion evaluation session. */
  RomController_getSessionById: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomSessionDto"];
        };
      };
    };
  };
  /** @description Creates a new session and closes previously opened session. */
  RomController_createSession: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRomSessionDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["RomSession"];
        };
      };
    };
  };
  /** @description Retrieves all sessions for a specific program. */
  RomController_getAllSessionByProgram: {
    parameters: {
      path: {
        programId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomUserSessionExtendedResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Closes previously opened session. */
  RomController_updateSession: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRomSessionDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomSession"];
        };
      };
    };
  };
  /** @description Closes previously opened session. */
  RomController_completeSession: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomSession"];
        };
      };
    };
  };
  /** @description Creates and saves patient results performed by user (patient). */
  RomController_savePatientResults: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRomPatientResultDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["RomPatientResult"];
        };
      };
    };
  };
  /** @description Closes previously opened session. */
  RomController_updatePatientResults: {
    parameters: {
      path: {
        resultId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExtendedUpdateRomPatientResultDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomPatientResult"];
        };
      };
    };
  };
  /** @description Retrieves all exercise from exercise library. */
  RomController_getRomLibrary: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomLibraryPaginatedDto"];
        };
      };
    };
  };
  /** @description Adds a new exercise to the exercise library. */
  RomController_createRomLibrary: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ExtendedRomLibraryDto"];
        };
      };
    };
  };
  /** @description Retrieves a rom library by id. */
  RomController_getRomLibraryById: {
    parameters: {
      path: {
        libraryId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomLibraryDto"];
        };
      };
    };
  };
  /** @description Delete library. */
  RomController_deleteRomLibrary: {
    parameters: {
      path: {
        libraryId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomLibrary"];
        };
      };
    };
  };
  /** @description Adds a new exercise to the exercise library. */
  RomController_updateRomLibrary: {
    parameters: {
      path: {
        libraryId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRomLibraryDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomLibraryDto"];
        };
      };
    };
  };
  /** @description Retrieves all exercise programs for a specific user. */
  RomController_getAllRomProgramsByUserId: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomProgramPaginatedDto"];
        };
      };
    };
  };
  /** @description Creates a program with custom exercises. */
  RomController_createRomProgram: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRomProgramDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ExtendedRomProgramDto"];
        };
      };
    };
  };
  /** @description Retrieves all exercise programs for a specific user. */
  RomController_getAllRomProgramsByPatientId: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        search?: string;
        sessions?: boolean | null;
      };
      path: {
        patientId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomProgramPaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves all exercise programs for a specific user. */
  RomController_getRomProgramById: {
    parameters: {
      path: {
        programId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomProgramDto"];
        };
      };
    };
  };
  /** @description Delete a Rom Program. */
  RomController_deleteRomProgram: {
    parameters: {
      path: {
        programId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomProgramDto"];
        };
      };
    };
  };
  /** @description Creates a program with custom exercises. */
  RomController_updateRomProgram: {
    parameters: {
      path: {
        programId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExtendedUpdateRomProgramDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomProgramDto"];
        };
      };
    };
  };
  RomController_generatePdfUrlAndSaveOnAzure: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GeneratePdfUrlAndSaveOnAzureDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** @description Fetches all unread entries from the activity stream. This endpoint highlights the events and communications that have not yet been viewed by the user or the physiotherapist. */
  ActivityStreamHistoryController_getHistoryUnread: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ActivityStreamUnreadMessagesResponseDto"][];
        };
      };
    };
  };
  /** @description Retrieves the entire activity stream history for a specific user. This provides a comprehensive view of all events and interactions related to the patient. */
  ActivityStreamHistoryController_getAllHistories: {
    parameters: {
      query?: {
        /** @description 2024-01-31 */
        endDate?: unknown;
        /** @description 2024-01-01 */
        startDate?: unknown;
        endCursor?: unknown;
      };
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ActivityStreamHistoryPaginatedResponseDto"];
        };
      };
    };
  };
  /** @description Marks all entries in the activity stream history as read for a specific user. This updates the status of the entries to indicate they have been reviewed. */
  ActivityStreamHistoryController_markHistoryAsRead: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
      default: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
    };
  };
  /** @description Retrieves the details of a specific activity stream entry based on its unique identifier. This provides a detailed view of the event, message, or evaluation. */
  ActivityStreamController_getActivityStreamById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ActivityStreamDto"];
        };
      };
    };
  };
  /** @description Creates a new evaluation entry in the activity stream, linking various session and result IDs, notes, and feedback to a specific user and physiotherapist. This helps in documenting and assessing the patient's progress and activities comprehensively. */
  ActivityStreamEvaluationController_createEvaluation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityStreamCreateEvaluationDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ActivityStreamEvaluationDto"];
        };
      };
    };
  };
  /** @description Retrieves a specific evaluation entry from the activity stream by its unique ID, providing detailed information about the patient's activities, progress, and feedback for that particular evaluation. */
  ActivityStreamEvaluationController_getEvaluationById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ActivityStreamEvaluationDto"];
        };
      };
    };
  };
  /** @description Creates a new feedback entry in the activity stream, linking it to a specific user and physiotherapist. The feedback can include notes, video content, and processing status, providing comprehensive documentation of patient feedback related to ROM sessions, programs, surveys, and evaluations. */
  ActivityStreamFeedbackController_createFeedback: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityStreamCreateFeedbackDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ActivityStreamFeedbackDto"];
        };
      };
    };
  };
  /** @description Retrieves a specific feedback entry from the activity stream by its unique ID. This provides detailed information about the patient's feedback, including associated notes, video content, and the status of processing for that particular feedback entry. */
  ActivityStreamFeedbackController_getFeedbackById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ActivityStreamFeedbackDto"];
        };
      };
    };
  };
  /** @description Creates a new post in the activity stream. The post includes details such as the user ID, physiotherapist ID, images, videos, a message, and the activity stream ID. This allows for multimedia communication and updates between the patient and the physiotherapist. */
  ActivityStreamPostController_createPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivityStreamCreatePostDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ActivityStreamPostDto"];
        };
      };
    };
  };
  /** @description Retrieves a specific post from the activity stream by its ID. This endpoint provides access to the content of the post, including any attached images, videos, and the message, facilitating review and communication between the patient and the physiotherapist. */
  ActivityStreamPostController_getPostById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ActivityStreamPostDto"];
        };
      };
    };
  };
  MobilityScoreController_getAll: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MobilityScorePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves a list of all available custom rom templates, providing an overview of predefined exercise custom rom that can be assigned to patients. */
  RomTemplateController_getRomAllTemplatesByClient: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedRomTemplatePaginatedDto"];
        };
      };
    };
  };
  /** @description Creates a custom rom template. This template can be reused for multiple patients, simplifying the creation of custom rom. */
  RomTemplateController_createRomTemplate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRomProgramTemplateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ExtendedTemplateDto"];
        };
      };
    };
  };
  /** @description Retrieves a list of all available custom rom templates, providing an overview of predefined exercise custom rom that can be assigned to patients. */
  RomTemplateController_getRomTemplateById: {
    parameters: {
      path: {
        programTemplateId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedTemplateDto"];
        };
      };
    };
  };
  /** @description Retrieves a list of all available custom rom templates, providing an overview of predefined exercise custom rom that can be assigned to patients. */
  RomTemplateController_deleteRomTemplate: {
    parameters: {
      path: {
        programTemplateId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomProgramTemplate"];
        };
      };
    };
  };
  /** @description Retrieves a list of all available custom rom templates, providing an overview of predefined exercise custom rom that can be assigned to patients. */
  RomTemplateController_updateRomTemplate: {
    parameters: {
      path: {
        programTemplateId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExtendedUpdateTemplateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedTemplateDto"];
        };
      };
    };
  };
  /** @description Generates a new exercise program for a patient based on AI recommendations. It considers the patient's evaluation results and OmniROM evaluation results. */
  ProgramController_generateProgram: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Program"];
        };
      };
    };
  };
  /** @description Creates a new exercise program. */
  ProgramController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProgramExtendedDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Program"];
        };
      };
    };
  };
  /** @description Retrieves all exercise programs for a specific user (patient). */
  ProgramController_getAllByUser: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        search?: string;
        sessions?: boolean | null;
        status?: components["schemas"]["Object"];
      };
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedProgramPaginatedDto"];
        };
      };
    };
  };
  /** @description Updates details of a specific exercise within a program. */
  ProgramController_updateProgramExercise: {
    parameters: {
      path: {
        exerciseId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProgramExerciseDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProgramExercise"];
        };
      };
    };
  };
  ProgramController_updateProgram: {
    parameters: {
      path: {
        programId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProgramCustomDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Program"];
        };
      };
    };
  };
  /** @description Adds a new exercise to an existing program. */
  ProgramController_addExerciseToProgram: {
    parameters: {
      path: {
        programId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProgramExerciseDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ProgramExercise"];
        };
      };
    };
  };
  /** @description Updates the order of exercises within a specific program. */
  ProgramController_updateProgramExercisesOrder: {
    parameters: {
      path: {
        programId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProgramExercisesOrderDto"];
      };
    };
    responses: {
      204: {
        content: never;
      };
    };
  };
  /** @description Creates a new exercise program for a specific user based on a template. */
  ProgramController_createFromTemplate: {
    parameters: {
      path: {
        templateId: string;
        userId: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Program"];
        };
      };
    };
  };
  /** @description Creates a new session for a program, tracking the patient's exercise session. */
  ProgramController_createSession: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProgramSessionDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ProgramSession"];
        };
      };
    };
  };
  /** @description Submits the results of a program session, including details of exercises performed and patient feedback. */
  ProgramController_createSessionResult: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ProgramSessionResult"];
        };
      };
    };
  };
  /** @description Retrieves all sessions for a specific program. */
  ProgramController_getAllSessionsByProgram: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        completed?: boolean;
      };
      path: {
        programId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedProgramSessionPaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves all sessions for a specific exercise within a program. */
  ProgramController_getAllExercisesResultsByProgram: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
      path: {
        programId: string;
        exerciseId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedProgramSessionResultPaginatedDto"];
        };
      };
    };
  };
  /** @description Adds a new exercise to the exercise library. */
  ProgramController_createExerciseLibrary: {
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ExerciseLibrary"];
        };
      };
    };
  };
  /** @description Retrieves all exercises in the library added by a specific Physical Therapist. */
  ProgramController_getExercisesLibrary: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        search?: string;
        bodyRegionIds?: number[];
        exerciseCategoriesIds?: number[];
        jointsIds?: number[];
        functionalGoalsIds?: number[];
        title?: string;
      };
      path: {
        physioterapistId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedExerciseLibraryPaginatedDto"];
        };
      };
    };
  };
  /** @description Updates the details of a specific exercise in the exercise library. */
  ProgramController_updateExerciseLibrary: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProgramExerciseLibraryUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExerciseLibrary"][];
        };
      };
    };
  };
  /** @description Deletes a specific exercise from the exercise library. The exercise is identified by its unique identifier. */
  ProgramController_deleteVideoFromLibrary: {
    parameters: {
      path: {
        exerciseId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExerciseLibrary"];
        };
      };
    };
  };
  /** @description Retrieves a list of users based on the status of their program sessions. This helps in tracking user progress and session completions. */
  ProgramController_getSessionsByStatus: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
      path: {
        status: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedUserResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Updates the status of a specific program session. This is used to mark sessions as completed, pending, or in-progress based on the session identifier. */
  ProgramController_updateSessionStatus: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProgramSession"];
        };
      };
    };
  };
  /** @description Enrolls a user in a specific program. This associates a user with a program, allowing them to start following the prescribed exercise regimen. */
  ProgramController_requestEnrollment: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserToolStatus"];
        };
      };
    };
  };
  /** @description Retrieves a list of all program enrollments. This includes information on which users are enrolled in which programs, useful for tracking participation and engagement. */
  ProgramController_getRequestedEnrollment: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProgramRequestEnrollmentResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Marks a specific program session as complete. This is used to indicate that a user has finished the session as prescribed. */
  ProgramController_completeSession: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProgramSession"];
        };
      };
    };
  };
  ProgramController_getSessionsById: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProgramSession"];
        };
      };
    };
  };
  ProgramController_getProgramById: {
    parameters: {
      path: {
        programId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Program"];
        };
      };
    };
  };
  ProgramController_deleteProgramFromUser: {
    parameters: {
      path: {
        programId: string;
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Program"];
        };
      };
    };
  };
  ProgramController_updateSessionResult: {
    parameters: {
      path: {
        sessionId: string;
        resultId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProgramSessionResultDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProgramSessionResult"];
        };
      };
    };
  };
  /** @description Retrieves data specific to a user, including their AI-generated programs, exercises, and other related information. This endpoint provides a detailed view of the user's interactions and usage of AI-assisted features. */
  OpenAiController_getProgramAi: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Program"];
        };
      };
    };
  };
  /** @description Creates a new AI-assisted entry or program based on the provided data. This endpoint leverages AI capabilities to generate personalized content, programs, or analyses for the user. */
  OpenAiController_generateProgram: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProgramAiDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Program"];
        };
      };
    };
  };
  /** @description Creates a new program template with a specified duration and a list of exercises. This template can be reused for multiple patients, simplifying the creation of exercise programs. */
  ProgramTemplateController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProgramTemplateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ProgramTemplate"];
        };
      };
    };
  };
  /** @description Retrieves a list of all available program templates, providing an overview of predefined exercise programs that can be assigned to patients. */
  ProgramTemplateController_getAllByClient: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        search?: string;
        bodyRegionIds?: number[];
        exerciseCategoriesIds?: number[];
        jointsIds?: number[];
        functionalGoalsIds?: number[];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProgramTemplateResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Updates an existing program template identified by its unique ID, allowing modifications to the template's duration, exercises, and other details. */
  ProgramTemplateController_updateProgram: {
    parameters: {
      path: {
        programId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProgramTemplateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProgramTemplate"];
        };
      };
    };
  };
  /** @description Adds new exercises to an existing program template, enabling further customization and expansion of the exercise program. */
  ProgramTemplateController_addExerciseToProgram: {
    parameters: {
      path: {
        programId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProgramExerciseTemplateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ProgramExerciseTemplate"];
        };
      };
    };
  };
  /** @description Updates specific exercises within a program template, allowing adjustments to the number of reps, sets, order, and other exercise parameters. */
  ProgramTemplateController_updateProgramExercise: {
    parameters: {
      path: {
        exerciseId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProgramExerciseTemplateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ProgramExerciseTemplate"];
        };
      };
    };
  };
  /** @description Retrieves the current settings for all clients, providing an overview of configuration details such as API keys and their statuses. */
  SettingsController_getSettings: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientSettingsDto"];
        };
      };
    };
  };
  /** @description Creates new settings for a client, including OpenAI API key information and activation status. This endpoint allows for the initial configuration and integration setup. */
  SettingsController_create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateClientSettingsDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ClientSettingsDto"];
        };
      };
    };
  };
  /** @description Updates existing settings identified by their unique identifier. This endpoint enables modifications to API key information, activation status, and other configuration details. */
  SettingsController_updateSettings: {
    parameters: {
      path: {
        settingsId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateClientSettingsDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ClientSettingsDto"];
        };
      };
    };
  };
  SettingsController_getEmailTemplate: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EmailTemplate"];
        };
      };
    };
  };
  SettingsController_createOrUpdateEmailTemplate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEmailTemplateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EmailTemplate"];
        };
      };
    };
  };
  SettingsController_getInviteTemplate: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InviteTemplate"];
        };
      };
    };
  };
  SettingsController_createOrUpdateInviteTemplate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateInviteTemplateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["InviteTemplate"];
        };
      };
    };
  };
  SettingsController_getRomEmailTemplate: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RomEmailTemplate"];
        };
      };
    };
  };
  SettingsController_createOrUpdateRomEmailTemplate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRomEmailTemplateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["RomEmailTemplate"];
        };
      };
    };
  };
  SettingsController_getTheme: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ThemeDto"];
        };
      };
    };
  };
  SettingsController_createOrUpdateTheme: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrUpdateThemeDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ThemeDto"];
        };
      };
    };
  };
  SettingsController_getNetworkSettings: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["NetworkSettingsDto"];
        };
      };
    };
  };
  SettingsController_createOrUpdateNetworkSettings: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrUpdateNetworkSettingsDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["NetworkSettingsDto"];
        };
      };
    };
  };
  SettingsController_getPremiumPlansStatusSettings: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PremiumPlanStatusDto"];
        };
      };
    };
  };
  SettingsController_createOrUpdatePremiumPlansStatusSettings: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateOrUpdatePremiumPlanStatusSettingsDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PremiumPlanStatusDto"];
        };
      };
    };
  };
  PlansSettingsController_getPlanSettings: {
    parameters: {
      query: {
        plan: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlansSettingsDto"];
        };
      };
    };
  };
  PlansSettingsController_createOrUpdatePlanSettings: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePlansSettingsDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PlansSettingsDto"];
        };
      };
    };
  };
  FunctionalGoalsSettingsController_getPlanSettings: {
    parameters: {
      query: {
        functionalGoalId: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FunctionalGoalsSettingsDto"];
        };
      };
    };
  };
  FunctionalGoalsSettingsController_createOrUpdatePlanSettings: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFunctionalGoalsSettingsExtendedDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FunctionalGoalsSettingsDto"];
        };
      };
    };
  };
  PreExistingConditionsSettingsController_getPlanSettings: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PreExistingConditionsSettingsDto"];
        };
      };
    };
  };
  PreExistingConditionsSettingsController_createOrUpdatePlanSettings: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePreExistingConditionsSettingsDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PreExistingConditionsSettingsDto"];
        };
      };
    };
  };
  /** @description Initiates a new evaluation for a patient, collecting comprehensive data on their pain points, health signs, and medical history. */
  EvaluationController_createEvaluation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvaluationCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["EvaluationSessionDto"];
        };
      };
    };
  };
  /** @description Updates an existing evaluation session with new or revised information. */
  EvaluationController_updateSession: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EvaluationUpdateSessionDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluationSessionDto"];
        };
      };
    };
  };
  /** @description Retrieves the evaluation data for a specific user, including their pain assessments, health signs, and medical history. */
  EvaluationController_getEvaluationSessionsByUserId: {
    parameters: {
      query: {
        page: number;
        limit: number;
      };
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluationResponsePaginatedDto"];
        };
      };
    };
  };
  EvaluationController_getEvaluationSessionsById: {
    parameters: {
      path: {
        evaluationId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluationResponseDto"];
        };
      };
    };
  };
  /** @description Retrieves users based on the status of their evaluation sessions, aiding in tracking and managing patient evaluations. */
  EvaluationController_getAllResultsByStatus: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
      path: {
        status: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluationUserSessionResponsePaginatedByUserDto"];
        };
      };
    };
  };
  /** @description Updates the status of a specific evaluation session, such as marking it as completed or in-progress. */
  EvaluationController_updateSessionStatus: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EvaluationSession"];
        };
      };
    };
  };
  /** @description Generates a new report based on specified parameters, such as user activities and tool usage within a defined date range. */
  ReportsController_createReport: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateReportsDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ReportsDto"];
        };
      };
    };
  };
  /** @description Creates a detailed report, allowing customization of included data such as ROM sessions, program sessions, evaluation sessions, and survey results. */
  ReportsController_createReportByFeatureAndDate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateReportsFeatureDateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["ReportsDto"];
        };
      };
    };
  };
  /** @description Retrieves reports specific to a particular user, detailing their interactions and usage of system tools. */
  ReportsController_getAll: {
    parameters: {
      query: {
        limit?: number;
        page?: number;
        search?: string;
        sort: components["schemas"]["Sort"];
      };
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReportsResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Fetches a specific report by its unique identifier, providing detailed information about the user's system usage and activities. */
  ReportsController_getOne: {
    parameters: {
      path: {
        reportId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedReportsDto"];
        };
      };
    };
  };
  /** @description Deletes a specific report identified by its unique identifier, removing it from the system. */
  ReportsController_deleteReport: {
    parameters: {
      path: {
        reportId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReportsDto"];
        };
      };
    };
  };
  /** @description Updates an existing report with new data or changes to previously included information. */
  ReportsController_updateReport: {
    parameters: {
      path: {
        reportId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateReportsDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedReportsDto"];
        };
      };
    };
  };
  /** @description Updates notes for existing report and appends new notes to previously included notes. */
  ReportsController_updateReportNotes: {
    parameters: {
      path: {
        reportId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateReportNotesExtendedDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ReportsDto"];
        };
      };
    };
  };
  ReportsController_omniRomeCSV: {
    parameters: {
      query: {
        startDate: string;
        endDate: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ReportsController_letsMoveCSV: {
    parameters: {
      query: {
        startDate: string;
        endDate: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ReportsController_aggregateCSV: {
    parameters: {
      query: {
        startDate: string;
        endDate: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** @description Creates a new survey with customizable questions and options, which can be manually tailored by the PT. The survey can also include images and instructions, and be saved as a template for future use. */
  SurveyController_createSurvey: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSurveyCustomDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Survey"];
        };
      };
    };
  };
  /** @description Retrieves all surveys associated with a specific user, providing an overview of their survey history and data collected. */
  SurveyController_getAllByUser: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        search?: string;
        approved?: boolean | null;
        sessions?: boolean | null;
      };
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveyResponsePaginatedDto"];
        };
      };
    };
  };
  SurveyController_deleteSurveyById: {
    parameters: {
      path: {
        surveyId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Survey"];
        };
      };
    };
  };
  /** @description Updates an existing survey identified by its unique ID, allowing modifications to the survey's questions, options, and other details. */
  SurveyController_updateSurvey: {
    parameters: {
      query?: {
        delete?: boolean | null;
      };
      path: {
        surveyId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSurveyCustomDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Survey"];
        };
      };
    };
  };
  /** @description Creates a new survey session for a specific survey ID, initiating the survey for a patient to complete. */
  SurveyController_saveSurveyResult: {
    parameters: {
      path: {
        surveyId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSurveyResultDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SurveyResult"];
        };
      };
    };
  };
  /** @description Fetches all survey sessions associated with a specific user, detailing their participation and responses in various surveys. */
  SurveyController_getSurveyResultsByUser: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        search?: string;
      };
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveyResultsResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves the details of a specific survey by its unique identifier, including its questions, options, and other configuration details. */
  SurveyController_getSurveyById: {
    parameters: {
      path: {
        surveyId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Survey"];
        };
      };
    };
  };
  /** @description Obtains the results of a specific survey session, providing insights into the patient's responses and feedback. */
  SurveyController_getSurveyResultById: {
    parameters: {
      path: {
        surveyResultId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveyResult"];
        };
      };
    };
  };
  /** @description Lists all sessions for a specific survey, allowing the PT to track patient participation and survey completion. */
  SurveyController_getSurveyResultBySurveyId: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        search?: string;
      };
      path: {
        surveyId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveyResultsResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves users based on the status of their survey sessions, helping PTs monitor survey progress and follow-up as needed. */
  SurveyController_getSessionsByStatus: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
      path: {
        status: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveySessionsByStatusDto"];
        };
      };
    };
  };
  /** @description Updates the status of a specific survey session, such as marking it as completed or in-progress, ensuring accurate tracking and management of survey activities. */
  SurveyController_updateSessionStatus: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveyResult"];
        };
      };
    };
  };
  /** @description Creates a new survey template, including a title, description, instructions, result feedback, and a set of predefined questions with options. This template can be used to quickly generate surveys for patients. */
  SurveyTemplateController_createSurveyTemplate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSurveyTemplateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["SurveyTemplate"];
        };
      };
    };
  };
  /** @description Retrieves a list of all available survey templates, providing an overview of predefined surveys that can be assigned to patients. */
  SurveyTemplateController_getAllByClient: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        search?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveyTemplateResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Updates an existing survey template identified by its unique ID, allowing modifications to the template's title, description, questions, and other details. */
  SurveyTemplateController_updateSurvey: {
    parameters: {
      query?: {
        delete?: boolean | null;
      };
      path: {
        surveyTemplateId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSurveyTemplateCustomDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SurveyTemplate"];
        };
      };
    };
  };
  /** @description Creates a new posture analytics session entry. */
  PostureAnalyticsController_createPostureAnalyticsSession: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePostureAnalyticsSessionDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PostureAnalyticsSession"];
        };
      };
    };
  };
  /** @description Creates a new posture analytics entry. */
  PostureAnalyticsController_createPostureAnalytics: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePostureAnalyticsDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PostureAnalytics"];
        };
      };
    };
  };
  /** @description Retrieves posture analytics sessions by user ID. */
  PostureAnalyticsController_getPostureAnalyticsSessionByUserId: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
        startDate?: string;
        endDate?: string;
      };
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ExtendedPostureAnalyticsSessionPaginated"];
        };
      };
    };
  };
  /** @description Retrieves a specific posture analytics entry by ID. */
  PostureAnalyticsController_getPostureAnalyticsById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostureAnalytics"];
        };
      };
    };
  };
  /** @description Deletes a specific posture analytics entry by ID. */
  PostureAnalyticsController_deletePostureAnalyticsSessionById: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostureAnalyticsSession"];
        };
      };
    };
  };
  /** @description Updates the status of a specific posture session, such as marking it as completed or in-progress. */
  PostureAnalyticsController_updatePostureSessionStatus: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostureAnalyticsSession"];
        };
      };
    };
  };
  /** @description Creates a new posture analytics report, which includes detailed assessments of the user’s posture based on the session data. */
  PostureAnalyticsController_createPostureAnalyticsReport: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePostureAnalyticsReportExtendedDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PostureAnalyticsReport"];
        };
      };
    };
  };
  /** @description Retrieves a list of all posture analytics reports, providing an overview of posture assessments for users. */
  PostureAnalyticsController_getPostureAnalyticsReport: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostureAnalyticsReportPaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves a list of all posture analytics reports, providing an overview of posture assessments for users. */
  PostureAnalyticsController_getPostureAnalyticsReportBySessionId: {
    parameters: {
      path: {
        sessionId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PostureAnalyticsReport"];
        };
      };
    };
  };
  /** @description Retrieves all stats */
  StatsController_getStatsFromClient: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["StatsResponseDto"];
        };
      };
    };
  };
  /** @description Retrieves all plans */
  PlansController_getUsersPlans: {
    parameters: {
      query?: {
        limit?: number;
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlansResponsePaginatedDto"];
        };
      };
    };
  };
  /** @description Retrieves all plans */
  PlansController_getUserPlan: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlansDto"];
        };
      };
    };
  };
  /** @description Retrieves all plans */
  PlansController_createUserPlan: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePlansDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["PlansDto"];
        };
      };
    };
  };
  /** @description Retrieves all plans */
  PlansController_updateUserPlan: {
    parameters: {
      path: {
        userId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePlansDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["PlansDto"];
        };
      };
    };
  };
  VrAuthController_generateCode: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  VrAuthController_validateCode: {
    responses: {
      201: {
        content: never;
      };
    };
  };
}
